// <auto-generated />
using System;
using Enerweb.FullStackTest.API.DomainEntities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Enerweb.FullStackTest.API.Migrations
{
    [DbContext(typeof(MeterDataContext))]
    [Migration("20210817070223_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Enerweb.FullStackTest.DomainEntities.MeterDataFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("FileContents")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("MeterDataFile");
                });

            modelBuilder.Entity("Enerweb.FullStackTest.DomainEntities.MeterDataFileDataPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("ExportEnergy")
                        .HasColumnType("decimal(7,4)");

                    b.Property<decimal>("ImportEnergy")
                        .HasColumnType("decimal(7,4)");

                    b.Property<int>("MeterDataFileOperatingDateId")
                        .HasColumnType("int");

                    b.Property<int>("MeterDataFileServicePointId")
                        .HasColumnType("int");

                    b.Property<int>("Period")
                        .HasColumnType("int");

                    b.Property<decimal>("ReadingFlag")
                        .HasColumnType("decimal(7,4)");

                    b.Property<string>("RecordType")
                        .HasColumnType("varchar(5)");

                    b.HasKey("Id");

                    b.HasIndex("MeterDataFileOperatingDateId");

                    b.ToTable("MeterDataFileDataPeriod");
                });

            modelBuilder.Entity("Enerweb.FullStackTest.DomainEntities.MeterDataFileHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileType")
                        .HasColumnType("varchar(5)");

                    b.Property<int>("MeterDataFileId")
                        .HasColumnType("int");

                    b.Property<string>("RecordType")
                        .HasColumnType("varchar(5)");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(12)");

                    b.HasKey("Id");

                    b.HasIndex("MeterDataFileId");

                    b.ToTable("MeterDataFileHeader");
                });

            modelBuilder.Entity("Enerweb.FullStackTest.DomainEntities.MeterDataFileOperatingDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MeterDataFileHeaderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OperatingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RecordType")
                        .HasColumnType("varchar(5)");

                    b.HasKey("Id");

                    b.HasIndex("MeterDataFileHeaderId");

                    b.ToTable("MeterDataFileOperatingDate");
                });

            modelBuilder.Entity("Enerweb.FullStackTest.DomainEntities.MeterDataFileServicePoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MeterDataFileHeaderId")
                        .HasColumnType("int");

                    b.Property<string>("MeterId")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("MeterSerialNumber")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("RecordType")
                        .HasColumnType("varchar(5)");

                    b.HasKey("Id");

                    b.HasIndex("MeterDataFileHeaderId");

                    b.ToTable("MeterDataFileServicePoint");
                });

            modelBuilder.Entity("Enerweb.FullStackTest.DomainEntities.MeterDataFileTrailer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MeterDataFileId")
                        .HasColumnType("int");

                    b.Property<int>("RecordCount")
                        .HasColumnType("int");

                    b.Property<string>("RecordType")
                        .HasColumnType("varchar(5)");

                    b.HasKey("Id");

                    b.HasIndex("MeterDataFileId");

                    b.ToTable("MeterDataFileTrailer");
                });

            modelBuilder.Entity("Enerweb.FullStackTest.DomainEntities.MeterDataFileDataPeriod", b =>
                {
                    b.HasOne("Enerweb.FullStackTest.DomainEntities.MeterDataFileOperatingDate", "MeterDataFileOperatingDate")
                        .WithMany()
                        .HasForeignKey("MeterDataFileOperatingDateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MeterDataFileOperatingDate");
                });

            modelBuilder.Entity("Enerweb.FullStackTest.DomainEntities.MeterDataFileHeader", b =>
                {
                    b.HasOne("Enerweb.FullStackTest.DomainEntities.MeterDataFile", "MeterDataFile")
                        .WithMany()
                        .HasForeignKey("MeterDataFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MeterDataFile");
                });

            modelBuilder.Entity("Enerweb.FullStackTest.DomainEntities.MeterDataFileOperatingDate", b =>
                {
                    b.HasOne("Enerweb.FullStackTest.DomainEntities.MeterDataFileHeader", "MeterDataFileHeader")
                        .WithMany()
                        .HasForeignKey("MeterDataFileHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MeterDataFileHeader");
                });

            modelBuilder.Entity("Enerweb.FullStackTest.DomainEntities.MeterDataFileServicePoint", b =>
                {
                    b.HasOne("Enerweb.FullStackTest.DomainEntities.MeterDataFileHeader", "MeterDataFileHeader")
                        .WithMany()
                        .HasForeignKey("MeterDataFileHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MeterDataFileHeader");
                });

            modelBuilder.Entity("Enerweb.FullStackTest.DomainEntities.MeterDataFileTrailer", b =>
                {
                    b.HasOne("Enerweb.FullStackTest.DomainEntities.MeterDataFile", "MeterDataFile")
                        .WithMany()
                        .HasForeignKey("MeterDataFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MeterDataFile");
                });
#pragma warning restore 612, 618
        }
    }
}
